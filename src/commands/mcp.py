#!/usr/bin/env python
"""
Comandos para intera√ß√£o com o MCP (Module Command Processor).
"""

import os
import sys
import json
import logging
import click
from rich import print
from rich.console import Console
from rich.table import Table
from typing import Optional, Dict, Any, List
from ..utils.logging import get_logger
from pathlib import Path

# Configura√ß√£o de logger
logger = get_logger(__name__)
console = Console()

# Tente importar o MCPRunClient simplificado
try:
    from ..tools.mcpx_simple import MCPRunClient, configure_mcprun
    MCPRUN_SIMPLE_AVAILABLE = True
    logger.info("M√≥dulo MCPRunClient simplificado dispon√≠vel")
except ImportError:
    MCPRUN_SIMPLE_AVAILABLE = False
    logger.warning("M√≥dulo MCPRunClient simplificado n√£o dispon√≠vel")

# Vari√°vel global para armazenar o ID da sess√£o MCP
_mcp_session_id = None


def get_mcp_session_id() -> Optional[str]:
    """Obt√©m o ID da sess√£o MCP salvo."""
    global _mcp_session_id
    
    if _mcp_session_id:
        return _mcp_session_id
        
    # Tenta carregar da configura√ß√£o
    config_file = os.path.expanduser("~/.arcee/config.json")
    if os.path.exists(config_file):
        try:
            with open(config_file, "r", encoding="utf-8") as f:
                config = json.load(f)
                _mcp_session_id = config.get("mcp_session_id")
                if _mcp_session_id:
                    return _mcp_session_id
        except Exception as e:
            logger.error(f"Erro ao carregar ID de sess√£o MCP: {e}")
    
    return None


def save_mcp_session_id(session_id: str) -> bool:
    """Salva o ID da sess√£o MCP na configura√ß√£o."""
    global _mcp_session_id
    _mcp_session_id = session_id
    
    # Cria o diret√≥rio .arcee se n√£o existir
    config_dir = os.path.expanduser("~/.arcee")
    config_file = os.path.join(config_dir, "config.json")
    
    try:
        os.makedirs(config_dir, exist_ok=True)
        
        # Carrega configura√ß√£o existente se houver
        config = {}
        if os.path.exists(config_file):
            with open(config_file, "r", encoding="utf-8") as f:
                config = json.load(f)
        
        # Atualiza com o novo ID de sess√£o
        config["mcp_session_id"] = session_id
        
        # Salva a configura√ß√£o
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2)
            
        logger.info(f"ID de sess√£o MCP salvo: {session_id}")
        return True
    except Exception as e:
        logger.error(f"Erro ao salvar ID de sess√£o MCP: {e}")
        return False


def configurar_mcp(session_id: Optional[str] = None) -> None:
    """Configura o cliente MCP.run com um ID de sess√£o."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
        print("üí° Verifique a instala√ß√£o do pacote simplificado")
        return
    
    try:
        print("üîÑ Configurando MCP.run...")
        
        # Usar o configure_mcprun para obter um ID de sess√£o
        new_session_id = configure_mcprun(session_id)
        
        if new_session_id:
            # Salvar o ID de sess√£o para uso futuro
            if save_mcp_session_id(new_session_id):
                print(f"‚úÖ ID de sess√£o MCP configurado: {new_session_id}")
                
                # Testar a conex√£o listando ferramentas
                client = MCPRunClient(session_id=new_session_id)
                tools = client.get_tools()
                print(f"‚ÑπÔ∏è Encontradas {len(tools)} ferramentas dispon√≠veis")
            else:
                print("‚ö†Ô∏è Configura√ß√£o salva, mas houve erro ao persistir")
                print(f"ID de sess√£o atual: {new_session_id}")
        else:
            print("‚ùå N√£o foi poss√≠vel configurar o MCP.run")
            print("üí° Verifique os logs para mais detalhes")
    except Exception as e:
        logger.exception(f"Erro ao configurar MCP.run: {e}")
        print(f"‚ùå Erro ao configurar MCP.run: {e}")


def listar_ferramentas() -> None:
    """Lista as ferramentas dispon√≠veis no MCP."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
        print("üí° Verifique a instala√ß√£o do pacote simplificado")
        return
    
    session_id = get_mcp_session_id()
    if not session_id:
        print("‚ùå MCP n√£o configurado. Execute primeiro: arcee mcp configurar")
        return
    
    print("üîç Obtendo lista de ferramentas dispon√≠veis...")
    try:
        client = MCPRunClient(session_id=session_id)
        tools = client.get_tools()
        
        if not tools:
            print("‚ÑπÔ∏è Nenhuma ferramenta MCP.run dispon√≠vel")
            return
            
        # Cria a tabela
        tabela = Table(title="üîå Ferramentas MCP.run")
        tabela.add_column("Nome", style="cyan")
        tabela.add_column("Descri√ß√£o", style="green")
        
        # Adiciona as ferramentas √† tabela
        for tool in tools:
            tabela.add_row(tool["name"], tool["description"])
            
        # Exibe a tabela
        console.print(tabela)
        
    except Exception as e:
        logger.exception(f"Erro ao listar ferramentas MCP: {e}")
        print(f"‚ùå Erro ao listar ferramentas MCP: {e}")


def executar_ferramenta(nome: str, params_json: Optional[str] = None) -> None:
    """Executa uma ferramenta MCP espec√≠fica com os par√¢metros fornecidos."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        print("‚ùå M√≥dulo MCP.run n√£o est√° dispon√≠vel")
        print("üí° Verifique a instala√ß√£o do pacote simplificado")
        return
    
    session_id = get_mcp_session_id()
    if not session_id:
        print("‚ùå MCP n√£o configurado. Execute primeiro: arcee mcp configurar")
        return
    
    # Processa os par√¢metros
    try:
        params = {}
        if params_json:
            params = json.loads(params_json)
    except json.JSONDecodeError as e:
        logger.error(f"Erro ao decodificar JSON: {e}")
        print(f"‚ùå Erro nos par√¢metros JSON: {e}")
        return
    
    # Executa a ferramenta
    print(f"üöÄ Executando ferramenta '{nome}'...")
    try:
        client = MCPRunClient(session_id=session_id)
        result = client.run_tool(nome, params)
        
        if result.get("error"):
            print(f"‚ùå Erro ao executar ferramenta: {result['error']}")
            if result.get("raw_output"):
                print("Sa√≠da original:")
                print(result["raw_output"])
        else:
            print("‚úÖ Resultado:")
            print(json.dumps(result, indent=2, ensure_ascii=False))
            
    except Exception as e:
        logger.exception(f"Erro ao executar ferramenta: {e}")
        print(f"‚ùå Erro ao executar ferramenta: {e}")


# Fun√ß√£o para implementar o MCPRunClient simplificado se n√£o estiver dispon√≠vel
def create_mcpx_simple_module():
    """Cria o m√≥dulo mcpx_simple.py se n√£o existir."""
    tools_dir = Path(__file__).parent.parent / "tools"
    tools_dir.mkdir(exist_ok=True)
    
    # Cria o arquivo __init__.py no diret√≥rio tools se n√£o existir
    init_file = tools_dir / "__init__.py"
    if not init_file.exists():
        with open(init_file, "w") as f:
            f.write("# Pacote de ferramentas para o CLI\n")
    
    # Caminho para o m√≥dulo mcpx_simple.py
    mcpx_file = tools_dir / "mcpx_simple.py"
    
    # Se o arquivo j√° existe, n√£o faz nada
    if mcpx_file.exists():
        return
    
    # Conte√∫do do m√≥dulo mcpx_simple.py
    mcpx_content = """#!/usr/bin/env python
\"\"\"
Cliente simplificado para o MCP.run.
\"\"\"

import os
import json
import logging
import requests
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class MCPRunClient:
    \"\"\"Cliente simplificado para o MCP.run.\"\"\"
    
    def __init__(self, session_id: Optional[str] = None):
        \"\"\"Inicializa o cliente com um ID de sess√£o.\"\"\"
        self.session_id = session_id or os.getenv("MCP_SESSION_ID")
        self.api_url = os.getenv("MCP_API_URL", "https://www.mcp.run/api")
        
        if not self.session_id:
            raise ValueError("Session ID n√£o fornecido e MCP_SESSION_ID n√£o configurado")
    
    def get_tools(self) -> List[Dict[str, Any]]:
        \"\"\"Obt√©m a lista de ferramentas dispon√≠veis.\"\"\"
        try:
            headers = {"Content-Type": "application/json"}
            url = f"{self.api_url}/mcp/get-tools?session_id={self.session_id}"
            
            response = requests.get(url, headers=headers, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            if "results" in result and "tools" in result["results"]:
                return result["results"]["tools"]
            return []
        except Exception as e:
            logger.error(f"Erro ao obter ferramentas: {e}")
            return []
    
    def run_tool(self, tool_name: str, params: Dict[str, Any]) -> Dict[str, Any]:
        \"\"\"Executa uma ferramenta com os par√¢metros fornecidos.\"\"\"
        try:
            headers = {"Content-Type": "application/json"}
            url = f"{self.api_url}/mcp/tool-call"
            
            data = {
                "session_id": self.session_id,
                "tool": tool_name,
                "method": "call",  # M√©todo padr√£o
                "parameters": params
            }
            
            response = requests.post(
                url, 
                headers=headers, 
                json=data,
                timeout=60
            )
            
            if response.status_code != 200:
                return {
                    "error": f"Erro HTTP {response.status_code}",
                    "raw_output": response.text
                }
            
            return response.json()
        except Exception as e:
            logger.exception(f"Erro ao executar ferramenta {tool_name}: {e}")
            return {"error": str(e)}

def configure_mcprun(session_id: Optional[str] = None) -> Optional[str]:
    \"\"\"
    Configura o cliente MCP.run.
    
    Se um session_id for fornecido, ele ser√° usado.
    Caso contr√°rio, tenta usar o da vari√°vel de ambiente.
    
    Returns:
        str: ID de sess√£o configurado ou None se falhar
    \"\"\"
    try:
        # Se foi fornecido um ID de sess√£o, us√°-lo
        if session_id:
            return session_id
            
        # Se n√£o fornecido, tenta usar o da vari√°vel de ambiente
        env_session_id = os.getenv("MCP_SESSION_ID")
        if env_session_id:
            # Testa se a sess√£o √© v√°lida
            client = MCPRunClient(session_id=env_session_id)
            try:
                tools = client.get_tools()
                if tools is not None:  # Mesmo que vazio, √© v√°lido
                    return env_session_id
            except:
                # Se der erro, a sess√£o pode estar expirada
                pass
                
        # Se chegou aqui, n√£o temos uma sess√£o v√°lida
        print("‚ö†Ô∏è Nenhuma sess√£o MCP v√°lida encontrada")
        print("üí° Especifique o ID de sess√£o ou configure a vari√°vel MCP_SESSION_ID")
        
        # No futuro, poder√≠amos implementar um fluxo de login
        # Por enquanto, retorna None
        return None
    except Exception as e:
        logger.exception(f"Erro ao configurar MCP.run: {e}")
        return None
"""
    
    # Escreve o conte√∫do no arquivo
    with open(mcpx_file, "w") as f:
        f.write(mcpx_content)
    
    print("‚úÖ M√≥dulo mcpx_simple.py criado em src/tools/")
    print("üí° Agora voc√™ pode importar MCPRunClient deste m√≥dulo")


# Fun√ß√µes de comando para o CLI
def main_configurar(session_id: Optional[str] = None) -> None:
    """Fun√ß√£o de comando para configurar o MCP."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        create_mcpx_simple_module()
        print("‚ö†Ô∏è M√≥dulo MCPRunClient criado, mas precisa ser importado")
        print("üí° Reinicie a aplica√ß√£o para usar as funcionalidades MCP")
        return
    
    configurar_mcp(session_id)


def main_listar() -> None:
    """Fun√ß√£o de comando para listar ferramentas MCP."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        create_mcpx_simple_module()
        print("‚ö†Ô∏è M√≥dulo MCPRunClient criado, mas precisa ser importado")
        print("üí° Reinicie a aplica√ß√£o para usar as funcionalidades MCP")
        return
    
    listar_ferramentas()


def main_executar(nome: str, params_json: Optional[str] = None) -> None:
    """Fun√ß√£o de comando para executar uma ferramenta MCP."""
    if not MCPRUN_SIMPLE_AVAILABLE:
        create_mcpx_simple_module()
        print("‚ö†Ô∏è M√≥dulo MCPRunClient criado, mas precisa ser importado")
        print("üí° Reinicie a aplica√ß√£o para usar as funcionalidades MCP")
        return
    
    executar_ferramenta(nome, params_json) 